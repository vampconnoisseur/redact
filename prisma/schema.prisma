generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccessLevel {
  REDACTED
  ORIGINAL
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?        @map("email_verified")
  image           String?
  isAdmin         Boolean          @default(false)
  accounts        Account[]
  sessions        Session[]
  ownedDocuments  Document[]       @relation("OwnedDocuments")
  sharedDocuments SharedDocument[] @relation("SharedWithUser")
}

model Document {
  id       String @id @default(cuid())
  fileName String
  s3Key    String @unique
  ownerId  String

  decryptionKey String
  redactionData Json

  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  owner      User             @relation("OwnedDocuments", fields: [ownerId], references: [id], onDelete: Cascade)
  sharedWith SharedDocument[]
}

model SharedDocument {
  id         String @id @default(cuid())
  documentId String
  userId     String

  accessLevel AccessLevel @default(REDACTED)

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation("SharedWithUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([documentId, userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
